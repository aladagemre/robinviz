# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gml_parser', [dirname(__file__)])
        except ImportError:
            import _gml_parser
            return _gml_parser
        if fp is not None:
            try:
                _mod = imp.load_module('_gml_parser', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _gml_parser = swig_import_helper()
    del swig_import_helper
else:
    import _gml_parser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GML_pair_val(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_pair_val, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_pair_val, name)
    __repr__ = _swig_repr
    __swig_setmethods__["integer"] = _gml_parser.GML_pair_val_integer_set
    __swig_getmethods__["integer"] = _gml_parser.GML_pair_val_integer_get
    if _newclass:integer = _swig_property(_gml_parser.GML_pair_val_integer_get, _gml_parser.GML_pair_val_integer_set)
    __swig_setmethods__["floating"] = _gml_parser.GML_pair_val_floating_set
    __swig_getmethods__["floating"] = _gml_parser.GML_pair_val_floating_get
    if _newclass:floating = _swig_property(_gml_parser.GML_pair_val_floating_get, _gml_parser.GML_pair_val_floating_set)
    __swig_setmethods__["string"] = _gml_parser.GML_pair_val_string_set
    __swig_getmethods__["string"] = _gml_parser.GML_pair_val_string_get
    if _newclass:string = _swig_property(_gml_parser.GML_pair_val_string_get, _gml_parser.GML_pair_val_string_set)
    __swig_setmethods__["list"] = _gml_parser.GML_pair_val_list_set
    __swig_getmethods__["list"] = _gml_parser.GML_pair_val_list_get
    if _newclass:list = _swig_property(_gml_parser.GML_pair_val_list_get, _gml_parser.GML_pair_val_list_set)
    def __init__(self): 
        this = _gml_parser.new_GML_pair_val()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_pair_val
    __del__ = lambda self : None;
GML_pair_val_swigregister = _gml_parser.GML_pair_val_swigregister
GML_pair_val_swigregister(GML_pair_val)

class GML_pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_pair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _gml_parser.GML_pair_key_set
    __swig_getmethods__["key"] = _gml_parser.GML_pair_key_get
    if _newclass:key = _swig_property(_gml_parser.GML_pair_key_get, _gml_parser.GML_pair_key_set)
    __swig_setmethods__["kind"] = _gml_parser.GML_pair_kind_set
    __swig_getmethods__["kind"] = _gml_parser.GML_pair_kind_get
    if _newclass:kind = _swig_property(_gml_parser.GML_pair_kind_get, _gml_parser.GML_pair_kind_set)
    __swig_setmethods__["value"] = _gml_parser.GML_pair_value_set
    __swig_getmethods__["value"] = _gml_parser.GML_pair_value_get
    if _newclass:value = _swig_property(_gml_parser.GML_pair_value_get, _gml_parser.GML_pair_value_set)
    __swig_setmethods__["next"] = _gml_parser.GML_pair_next_set
    __swig_getmethods__["next"] = _gml_parser.GML_pair_next_get
    if _newclass:next = _swig_property(_gml_parser.GML_pair_next_get, _gml_parser.GML_pair_next_set)
    def __init__(self): 
        this = _gml_parser.new_GML_pair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_pair
    __del__ = lambda self : None;
GML_pair_swigregister = _gml_parser.GML_pair_swigregister
GML_pair_swigregister(GML_pair)

class GML_list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _gml_parser.GML_list_elem_key_set
    __swig_getmethods__["key"] = _gml_parser.GML_list_elem_key_get
    if _newclass:key = _swig_property(_gml_parser.GML_list_elem_key_get, _gml_parser.GML_list_elem_key_set)
    __swig_setmethods__["next"] = _gml_parser.GML_list_elem_next_set
    __swig_getmethods__["next"] = _gml_parser.GML_list_elem_next_get
    if _newclass:next = _swig_property(_gml_parser.GML_list_elem_next_get, _gml_parser.GML_list_elem_next_set)
    def __init__(self): 
        this = _gml_parser.new_GML_list_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_list_elem
    __del__ = lambda self : None;
GML_list_elem_swigregister = _gml_parser.GML_list_elem_swigregister
GML_list_elem_swigregister(GML_list_elem)

class GML_stat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_stat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_stat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err"] = _gml_parser.GML_stat_err_set
    __swig_getmethods__["err"] = _gml_parser.GML_stat_err_get
    if _newclass:err = _swig_property(_gml_parser.GML_stat_err_get, _gml_parser.GML_stat_err_set)
    __swig_setmethods__["key_list"] = _gml_parser.GML_stat_key_list_set
    __swig_getmethods__["key_list"] = _gml_parser.GML_stat_key_list_get
    if _newclass:key_list = _swig_property(_gml_parser.GML_stat_key_list_get, _gml_parser.GML_stat_key_list_set)
    def __init__(self): 
        this = _gml_parser.new_GML_stat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_stat
    __del__ = lambda self : None;
GML_stat_swigregister = _gml_parser.GML_stat_swigregister
GML_stat_swigregister(GML_stat)


def GML_parser(*args):
  return _gml_parser.GML_parser(*args)
GML_parser = _gml_parser.GML_parser

def GML_free_list(*args):
  return _gml_parser.GML_free_list(*args)
GML_free_list = _gml_parser.GML_free_list

def GML_print_list(*args):
  return _gml_parser.GML_print_list(*args)
GML_print_list = _gml_parser.GML_print_list

def fopen(*args):
  return _gml_parser.fopen(*args)
fopen = _gml_parser.fopen

def fread(*args):
  return _gml_parser.fread(*args)
fread = _gml_parser.fread

def fwrite(*args):
  return _gml_parser.fwrite(*args)
fwrite = _gml_parser.fwrite

def fclose(*args):
  return _gml_parser.fclose(*args)
fclose = _gml_parser.fclose

def malloc(*args):
  return _gml_parser.malloc(*args)
malloc = _gml_parser.malloc
INITIAL_SIZE = _gml_parser.INITIAL_SIZE
GML_KEY = _gml_parser.GML_KEY
GML_INT = _gml_parser.GML_INT
GML_DOUBLE = _gml_parser.GML_DOUBLE
GML_STRING = _gml_parser.GML_STRING
GML_L_BRACKET = _gml_parser.GML_L_BRACKET
GML_R_BRACKET = _gml_parser.GML_R_BRACKET
GML_END = _gml_parser.GML_END
GML_LIST = _gml_parser.GML_LIST
GML_ERROR = _gml_parser.GML_ERROR
GML_UNEXPECTED = _gml_parser.GML_UNEXPECTED
GML_SYNTAX = _gml_parser.GML_SYNTAX
GML_PREMATURE_EOF = _gml_parser.GML_PREMATURE_EOF
GML_TOO_MANY_DIGITS = _gml_parser.GML_TOO_MANY_DIGITS
GML_OPEN_BRACKET = _gml_parser.GML_OPEN_BRACKET
GML_TOO_MANY_BRACKETS = _gml_parser.GML_TOO_MANY_BRACKETS
GML_OK = _gml_parser.GML_OK
class GML_error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_error, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err_num"] = _gml_parser.GML_error_err_num_set
    __swig_getmethods__["err_num"] = _gml_parser.GML_error_err_num_get
    if _newclass:err_num = _swig_property(_gml_parser.GML_error_err_num_get, _gml_parser.GML_error_err_num_set)
    __swig_setmethods__["line"] = _gml_parser.GML_error_line_set
    __swig_getmethods__["line"] = _gml_parser.GML_error_line_get
    if _newclass:line = _swig_property(_gml_parser.GML_error_line_get, _gml_parser.GML_error_line_set)
    __swig_setmethods__["column"] = _gml_parser.GML_error_column_set
    __swig_getmethods__["column"] = _gml_parser.GML_error_column_get
    if _newclass:column = _swig_property(_gml_parser.GML_error_column_get, _gml_parser.GML_error_column_set)
    def __init__(self): 
        this = _gml_parser.new_GML_error()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_error
    __del__ = lambda self : None;
GML_error_swigregister = _gml_parser.GML_error_swigregister
GML_error_swigregister(GML_error)

class GML_tok_val(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_tok_val, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_tok_val, name)
    __repr__ = _swig_repr
    __swig_setmethods__["integer"] = _gml_parser.GML_tok_val_integer_set
    __swig_getmethods__["integer"] = _gml_parser.GML_tok_val_integer_get
    if _newclass:integer = _swig_property(_gml_parser.GML_tok_val_integer_get, _gml_parser.GML_tok_val_integer_set)
    __swig_setmethods__["floating"] = _gml_parser.GML_tok_val_floating_set
    __swig_getmethods__["floating"] = _gml_parser.GML_tok_val_floating_get
    if _newclass:floating = _swig_property(_gml_parser.GML_tok_val_floating_get, _gml_parser.GML_tok_val_floating_set)
    __swig_setmethods__["string"] = _gml_parser.GML_tok_val_string_set
    __swig_getmethods__["string"] = _gml_parser.GML_tok_val_string_get
    if _newclass:string = _swig_property(_gml_parser.GML_tok_val_string_get, _gml_parser.GML_tok_val_string_set)
    __swig_setmethods__["err"] = _gml_parser.GML_tok_val_err_set
    __swig_getmethods__["err"] = _gml_parser.GML_tok_val_err_get
    if _newclass:err = _swig_property(_gml_parser.GML_tok_val_err_get, _gml_parser.GML_tok_val_err_set)
    def __init__(self): 
        this = _gml_parser.new_GML_tok_val()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_tok_val
    __del__ = lambda self : None;
GML_tok_val_swigregister = _gml_parser.GML_tok_val_swigregister
GML_tok_val_swigregister(GML_tok_val)

class GML_token(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GML_token, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GML_token, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kind"] = _gml_parser.GML_token_kind_set
    __swig_getmethods__["kind"] = _gml_parser.GML_token_kind_get
    if _newclass:kind = _swig_property(_gml_parser.GML_token_kind_get, _gml_parser.GML_token_kind_set)
    __swig_setmethods__["value"] = _gml_parser.GML_token_value_set
    __swig_getmethods__["value"] = _gml_parser.GML_token_value_get
    if _newclass:value = _swig_property(_gml_parser.GML_token_value_get, _gml_parser.GML_token_value_set)
    def __init__(self): 
        this = _gml_parser.new_GML_token()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gml_parser.delete_GML_token
    __del__ = lambda self : None;
GML_token_swigregister = _gml_parser.GML_token_swigregister
GML_token_swigregister(GML_token)


def GML_init():
  return _gml_parser.GML_init()
GML_init = _gml_parser.GML_init

def GML_scanner(*args):
  return _gml_parser.GML_scanner(*args)
GML_scanner = _gml_parser.GML_scanner

cvar = _gml_parser.cvar

